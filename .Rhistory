#        A := A - a
#        break
#   if ( a still in A)
#     B := B + a
#     A := A - a
B <- list()
A <- lapply(seq_len(nrow(M)),function(i) which(M[i,]))
while( length(A) > 0 ){
nL <- length(A)
a <- A[[1]]
for ( i in seq_along(B) ){
b <- B[[i]]
if ( any(a %in% b)  ){
B[[i]] = unique(c(a,b))
A <- A[-1]
break
}
}
if (nL == length(A)){ # a still in L
B[[length(B)+1]] <- a
A <- A[-1]
}
}
B
}
#' Create a summary
#' @rdname validate-summary
#' @example ../examples/summary.R
setGeneric('summary')
#' exported.
#'
#' @param x An R object
#' @param file A file location or connection (passed to \code{base::\link[base]{write}}).
#' @param ... Options passed to \code{yaml::\link[yaml]{as.yaml}}
#'
#'
#' @example ../examples/export_yaml.R
#'
#' @export
setGeneric("export_yaml",function(x,file,...) standardGeneric("export_yaml"))
#' @rdname export_yaml
#' @export
setGeneric("as_yaml", function(x,...) standardGeneric("as_yaml"))
#' @param as how to return variables:
#' \itemize{
#'   \item{\code{'vector'}} Return the uniqe vector of variables occurring in \code{x}.
#'   \item{\code{'matrix'}} Return a boolean matrix, each row representing a rule, each column representing a variable.
#'   \item{\code{'list'}} Return a named \code{list}, each entry containing a character vector with variable names.
#' }
#' @param dummy Also retrieve transient variables set with the \code{:=} operator.
#'
#' @family expressionset-methods
#' @example ../examples/variables.R
setMethod("variables", "expressionset",  function(x, as=c('vector','matrix','list'), dummy=FALSE, ...){
as <- match.arg(as)
vars <- lapply(x$exprs(replace_dollar=FALSE, expand_assignments=!dummy),var_from_call)
u <- unique(unlist(vars))
switch(as
, 'vector' = u
, 'list'   = vars
, 'matrix' = {
a <- array(FALSE,dim=c(length(vars),length(u)),dimnames=list(rule=names(vars),variable=u) )
for (i in seq_along(vars)) a[i,vars[[i]]] <- TRUE
a
})
})
#' @rdname voptions
#' @family expressionset-methods
setMethod('voptions','expressionset',function(x=NULL,...){
if (settings::is_setting(...)){
x$._options <- clone_and_merge(x$._options,...)
} else {
x$._options(...)
}
})
#' @rdname voptions
#' @family expressionset-methods
setMethod('reset','expressionset',function(x=NULL){
settings::reset(x$._options)
})
#' @rdname origin
#' @family expressionset-methods
setMethod("origin", "expressionset", function(x,...) sapply(x$rules,origin))
#' @rdname label
#' @family expressionset-methods
setMethod("label","expressionset",function(x,...) unlist(sapply(x$rules, label)))
#' @rdname description
#' @family expressionset-methods
setMethod("description", "expressionset", function(x,...) unlist(sapply(x$rules, description)))
#' @rdname meta
#' @param simplify Gather all metadata into a dataframe?
#' @family expressionset-methods
setMethod("meta","expressionset", function(x, simplify=TRUE,...){
L <- lapply(x$rules, function(r){
list(name=r@name
, label = label(r)
, description=description(r)
, origin = origin(r)
, created = created(r)
, meta = meta(r)
)
})
if (!simplify){
L
} else {
K <- lapply(L, function(m){
c(m[1:5], m[[6]])
})
cols <- Reduce(union, lapply(K,names))
U <- matrix(NA,nrow=length(K),ncol=length(cols),dimnames=list(NULL,cols))
U <- as.data.frame(U)
for (i in seq_along(K)){
k <- K[[i]]
U[i,names(k)] <- k
}
U$created <- .POSIXct(U$created)
U
}
})
#' @rdname created
#' @family expressionset-methods
setMethod("created", "expressionset", function(x,...){
# obj. of class POSIXct; sapply strips the POSIXct class attribute
cr <- rep(Sys.time(),length(x))
for ( i in seq_along(x)){
cr[i] <- created(x$rules[[i]])
}
cr
})
#' Extract or set names
#'
#' @param x An R object
#'
#' @return A \code{character} vector
#' @rdname names
#' @family expressionset-methods
#' @export
#' @example ../examples/properties.R
setMethod("names","expressionset",function(x){
sapply(x$rules, function(rule) rule@name)
})
# recycle x over y
recycle <- function(x,y){
m <- length(x)
n <- length(y)
remainder <- n %% m
times <- n %/% m
if (remainder > 0){
warning(gettext("longer object length is not a multiple of shorter object length"))
times <- times + 1
}
rep(x,times=times)[seq_len(n)]
}
#' @rdname meta
setReplaceMethod("meta",c("expressionset","character"),function(x,name,value){
values <- rep(value, times = (length(x) %/% length(value)+1))[seq_along(x)]
for ( i in seq_along(x$rules)){
rule <- x[[i]]
meta(rule, name) <- values[i]
x$rules[[i]] <- rule
}
x
})
#'
#'
#' When setting names, \code{value}s are recycled and made unique with
#' \code{\link{make.names}}
#'
#' @rdname names
#' @param value Value to set
#' @example ../examples/properties.R
#' @export
setReplaceMethod("names",c("expressionset","character"),function(x,value){
value <- make.names(recycle(value,x),unique=TRUE)
for ( i in seq_len(length(x))){
names(x$rules[[i]]) <- value[i]
}
x
})
#' @rdname origin
setReplaceMethod("origin",c("expressionset","character"), function(x,value){
value <- recycle(value, x)
for ( i in seq_len(length(x))){
origin(x$rules[[i]]) <- value[i]
}
x
})
#' @rdname label
#' @export
setReplaceMethod("label",c("expressionset","character"),function(x,value){
value <- recycle(value,x)
for ( i in seq_len(length(x))){
label(x$rules[[i]]) <- value[i]
}
x
})
#' @rdname description
#' @export
setReplaceMethod("description",c("expressionset","character"),function(x,value){
value <- recycle(value,x)
for ( i in seq_len(length(x))){
description(x$rules[[i]]) <- value[i]
}
x
})
#' @rdname created
#' @export
setReplaceMethod("created",c("expressionset","POSIXct"),function(x,value){
value <- recycle(value, x)
for ( i in seq_len(length(x))){
created(x$rules[[i]]) <- value[i]
}
x
})
setMethod("validating", "expressionset", function(x,...){
if (length(x) == 0) return(logical(0))
sapply(x$rules, validating)
})
setMethod("linear","expressionset", function(x,...){
if(length(x)==0) return(logical(0))
sapply(x$rules, linear)
})
#' @section Validator and indicator objects:
#' For these objects, the ruleset is split into subsets (blocks) that are disjunct in the
#' sense that they do not share any variables. For each block the number of variables,
#' the number of rules and the number of rules that are linear are reported.
#'
#' @return A \code{data.frame} with the information mentioned below is returned.
#'
#' @rdname validate-summary
#' @seealso \code{\link{plot,validator-method}}
#' @family expressionset-methods
setMethod('summary',signature('expressionset'),function(object,...){
b <- object$blocks()
data.frame(
block = seq_along(b)
, nvar  = sapply(b,function(i) length(variables(object[i])))
, rules = sapply(b,length)
, linear = sapply(b,function(i) sum(object[i]$is_linear()))
, row.names=NULL
)
})
#' Determine the number of elements in an object.
#'
#' @param x An R object
#' @rdname length
#' @aliases length,expressionset-method
#' @export
setMethod("length","expressionset",function(x) length(x$rules))
#' Select a subset
#' Select a subset
#'
#' @section Details:
#' Select a subset
#'
#' @section Details:
#' The \code{options} attribute will be cloned
#'
#' Select a subset
#'
#' @section Details:
#' The \code{options} attribute will be cloned
#'
#' @param x An R object
#' @param i an index (numeric, boolean, character)
#' Select a subset
#'
#' @section Details:
#' The \code{options} attribute will be cloned
#'
#' @param x An R object
#' @param i an index (numeric, boolean, character)
#' @param j not implemented
#' @param drop not implemented
#' Select a subset
#'
#' @section Details:
#' The \code{options} attribute will be cloned
#'
#' @param x An R object
#' @param i an index (numeric, boolean, character)
#' @param j not implemented
#' @param drop not implemented
#' @param ... Arguments to be passed to other methods
#'
#' @section Details:
#' The \code{options} attribute will be cloned
#'
#' @param x An R object
#' @param i an index (numeric, boolean, character)
#' @param j not implemented
#' @param drop not implemented
#' @param ... Arguments to be passed to other methods
#'
#' @return An new object, of the same class as \code{x} subsetted according to \code{i}.
#' @rdname select
#'
#' @param x An R object
#' @param i an index (numeric, boolean, character)
#' @param j not implemented
#' @param drop not implemented
#' @param ... Arguments to be passed to other methods
#'
#' @return An new object, of the same class as \code{x} subsetted according to \code{i}.
#' @rdname select
#' @aliases [,expressionset-method
#'
#' @param i an index (numeric, boolean, character)
#' @param j not implemented
#' @param drop not implemented
#' @param ... Arguments to be passed to other methods
#'
#' @return An new object, of the same class as \code{x} subsetted according to \code{i}.
#' @rdname select
#' @aliases [,expressionset-method
#'
#' @export
#' @keywords internal
if (missing(i)){
i <- seq_len(length(x))
} else if (is.character(i)){
i <- match(i,names(x))
}
out <- new(class(x))
out$rules <- x$rules[i]
out$._options = clone_and_merge(x$._options)
out
})
#' Replace a rule in a ruleseta
#'
#' @param x an R object
#' @param i index of length 1
#' @param value object of class \code{\link{rule}}
#' @export
#' @keywords internal
setMethod("[[<-",signature("expressionset"),function(x,i,value){
stopifnot(inherits(value,"rule"))
stopifnot(length(i)==1)
x$rules[[i]] <- value
x
})
#' Replace a subset of an expressionset with another expressionset
#'
#' @param x an R object inheriting from \code{expressionset}
#' @param i a \code{logical}, \code{character}, or \code{numeric} index
#' @param value an R object of the same class as \code{x}
#' @export
#' @keywords internal
setMethod("[<-",signature("expressionset"),function(x,i,value){
stopifnot(inherits(value,class(x)))
if (is.character(i)){
i <- match(i,names(x),nomatch=0)
}
x$rules[i] <- value$rules
x
})
#' @param exact Not implemented
#' @rdname select
#' @aliases [[,expressionset-method
#' @keywords internal
setMethod("[[",signature("expressionset"), function(x,i,j,...,exact=TRUE){
if ( is.character(i) ){
i <- which(i %in% names(x))
# workaround so default 'str' doesnt crash (see comments in issue #82)
if (length(i)==0) return(NULL)
}
x$rules[[i]]
})
setMethod("is_tran_assign","expressionset",function(x,...){
if (length(x)==0) return(logical(0))
sapply(x$rules,is_tran_assign)
})
#' @rdname export_yaml
setMethod("export_yaml","expressionset", function(x, file,...){
write(x = as_yaml(x,...), file=file)
})
#' @rdname export_yaml
setMethod("as_yaml","expressionset",function(x,...){
option_string <- ""
if (!identical(x$._options,.PKGOPT)){ # export options when set.
option_string <- paste0("---\n",yaml::as.yaml(list(options=x$options()),...),"---\n")
}
rule_string <- yaml::as.yaml(rapply(as.list.expressionset(x), f=function(y) paste0("",y),how="replace"),...)
paste0(option_string,rule_string)
})
as.list.expressionset <- function(x, expr_as_text=TRUE, ...){
list(
rules = lapply(x$rules, as.list.rule, expr_as_text = expr_as_text, ...)
)
}
#' Coerce to \code{data.frame}
#'
#' @param x Object to coerce
#' @param ... arguments passed to other methods
#' @param optional ignored
#' @param row.names ignored
#'
#' @export
#' @family expressionset-methods
#' @keywords internal
setGeneric("as.data.frame")
#'
#'
#' @inheritParams as.data.frame
#' @param expand_assignments Toggle substitution of `:=` assignments.
#'
#'
#' @return A \code{data.frame} with elements \code{rule}, \code{name},
#'  \code{label}, \code{origin}, \code{description}, and \code{created}.
#' @export
#' @family expressionset-methods
setMethod("as.data.frame","expressionset", function(x, expand_assignments=TRUE, ...){
rules <- x$exprs(expand_assignments=expand_assignments,...)
i_ref <- if (expand_assignments) sapply(rules, function(d) attr(d,"reference"))
else seq_along(rules)
rules <- sapply(rules, call2text)
dat <- cbind(meta(x,simplify=TRUE)[i_ref,,drop=FALSE],rule=rules)
# expanding assignments may add numbering to expressions
dat$name <- names(rules)
dat
})
ini_validator <- function(obj, ..., .file, .data){
check_primitives()
if (missing(.file) && missing(.data) ){
.ini_expressionset_cli(obj, ..., .prefix="V")
obj$._options <- .PKGOPT
print("validating(obj)")
print(validating(obj))
print("is_tran_assign(obj)")
print(is_tran_assign(obj))
i <- validating(obj) | is_tran_assign(obj)
if ( !all(i) ){
invalid <- sapply(which(!i),function(k) deparse(expr(obj[[k]])))
wrn <- sprintf("\n[%03d] %s",which(!i), invalid)
warning(paste0(
"Invalid syntax detected, the following expressions have been ignored:"
, paste0(wrn,collapse="")
), call.=FALSE)
obj$rules <- obj$rules[i]
}
} else if (!missing(.file)) {
.ini_expressionset_yml(obj, file=.file, .prefix="V")
} else if (!missing(.data)){
.ini_expressionset_df(obj, dat=.data, .prefix="V")
i <- validating(obj) | is_tran_assign(obj)
if (!all(i)){
r <- paste(which(!i),collapse=", ")
warning("Invalid syntax detected, ignoring rows ",r)
obj$rules <- obj$rules[i]
}
obj$._options <- .PKGOPT
}
for ( r in seq_along(obj)){
if ( is.null( meta(obj[[r]])$language ) ) {
meta(obj[[r]],"language") <- paste("validate",utils::packageVersion("validate"))
}
if (is.null( meta(obj[[r]])$severity)) {
meta(obj[[r]],"severity") <- "error"
}
}
}
ini_validator(valid)
?logical
library(validate)
dat <- data.frame(A = c("X","Y"),B=c("Y","Y"),stringsAsFactors=FALSE)
values(check_that(dat,A == B))
quote(a == b)
l <- quote(a == b)
l
library(devtools)
packageVersion(devtools)
packageVersion("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
library("devtools")
install.packages("devtools")
library(devtools)
install.packages("devtools")
library(devtools)
packageVersion("devtools")
library(tidyverse)
install.packages(["tidyverse", "fs"])
install.packages("tidyverse", "fs")
install.packages("tidyverse", "fs")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("fs")
install.packages("fs")
library(tidyverse)
library(fs)
library(rlang)
library(lobstr)
expr(mean(x, na.rm =TRUE))
expr(10 + 100 +1000)
rlang::expr(10 + 100 +1000)
clear()
library(rlang)
library(lobstr)
expr(mean(x, na.rm =TRUE))
expr(10 + 100 +1000)
?ls
ls()
z <- 1
x <- 2
ls()
data(mtcars)
mtcars
setwd("G:/Scripts/R/Advanced_R")
write.csv(mtcars, file ="mtcars.csv")
